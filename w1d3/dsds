
[1mFrom:[0m array.c (C Method):
[1mOwner:[0m Array
[1mVisibility:[0m public
[1mSignature:[0m bsearch()
[1mNumber of lines:[0m 47

By using binary search, finds a value from this array which meets
the given condition in O(log n) where n is the size of the array.

You can use this method in two modes: a find-minimum mode and
a find-any mode.  In either case, the elements of the array must be
monotone (or sorted) with respect to the block.

In find-minimum mode (this is a good choice for typical use cases),
the block must always return true or false, and there must be an index i
(0 <= i <= ary.size) so that:

- the block returns false for any element whose index is less than
  i, [32mand[0m
- the block returns true for any element whose index is greater
  than [32mor[0m equal to i.

This method returns the i-th element.  If i is equal to ary.size,
it returns nil.

   ary = [[1;34m0[0m, [1;34m4[0m, [1;34m7[0m, [1;34m10[0m, [1;34m12[0m]
   ary.bsearch {|x| x >=   [1;34m4[0m } [1;34m#=> 4[0m
   ary.bsearch {|x| x >=   [1;34m6[0m } [1;34m#=> 7[0m
   ary.bsearch {|x| x >=  [1;34m-1[0m } [1;34m#=> 0[0m
   ary.bsearch {|x| x >= [1;34m100[0m } [1;34m#=> nil[0m

In find-any mode (this behaves like libc's bsearch(3)), the block
must always return a number, and there must be two indices i and j
(0 <= i <= j <= ary.size) so that:

- the block returns a positive number for ary[k] if 0 <= k < i,
- the block returns zero for ary[k] if i <= k < j, and
- the block returns a negative number for ary[k] if
  j <= k < ary.size.

Under this condition, this method returns any element whose index
is within i...j.  If i is equal to j (i.e., there is no element
that satisfies the block), this method returns nil.

   ary = [[1;34m0[0m, [1;34m4[0m, [1;34m7[0m, [1;34m10[0m, [1;34m12[0m]
   [1;34m# try to find v such that 4 <= v < 8[0m
   ary.bsearch {|x| [1;34m1[0m - x / [1;34m4[0m } [1;34m#=> 4 or 7[0m
   [1;34m# try to find v such that 8 <= v < 10[0m
   ary.bsearch {|x| [1;34m4[0m - x / [1;34m2[0m } [1;34m#=> nil[0m

You must not mix the two modes at a time; the block must always
return either true/false, or always return a number.  It is
undefined which value is actually picked up at each iteration.
